// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  GUEST
  USER
  PREMIUM
  ADMIN
  VENDOR
}

enum TourStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum TourCategory {
  ADVENTURE
  CULTURAL
  LUXURY
  BUDGET
  FAMILY
  ROMANTIC
  BUSINESS
  RELIGIOUS
}

// User Management
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String?   @unique
  password        String?   // For credentials login
  firstName       String?
  lastName        String?
  phone           String?
  dateOfBirth     DateTime?
  profileImage    String?
  role            Role      @default(USER)
  isEmailVerified Boolean   @default(false)
  loyaltyPoints   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Auth relations
  accounts        Account[]
  sessions        Session[]
  
  // Travel relations
  bookings        Booking[]
  reviews         Review[]
  wishlist        Wishlist[]
  
  // Vendor relations (if user is a vendor)
  vendorProfile   VendorProfile?
  tours           Tour[]    @relation("VendorTours")
  
  // Communication relations
  chatMessages    ChatMessage[]
  roomParticipants ChatRoomParticipant[]
  notifications   Notification[]
  presence        UserPresence?
  notificationPreferences NotificationPreference[]
  
  // Itineraries
  itineraries   Itinerary[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Vendor Management
model VendorProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  companyName     String
  description     String?
  website         String?
  licenseNumber   String?
  isVerified      Boolean  @default(false)
  commission      Float    @default(10.0)
  totalEarnings   Float    @default(0)
  rating          Float    @default(0)
  totalReviews    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("vendor_profiles")
}

// Destination Management
model Destination {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  country     String
  state       String?
  city        String
  latitude    Float?
  longitude   Float?
  images      String?   // JSON array as string for SQLite
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tours       Tour[]
  
  // Itinerary relation
  itineraryItems ItineraryItem[]
  
  @@map("destinations")
}

// Tour Management
model Tour {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  description     String
  shortDescription String?
  images      String        // JSON array as string for SQLite
  videos      String?       // JSON array as string for SQLite
  category        TourCategory
  duration        Int           // in days
  maxGroupSize    Int
  minAge          Int           @default(0)
  difficulty      String?       // Easy, Moderate, Challenging
  basePrice       Float
  discountPrice   Float?
  included        String        // JSON array as string for SQLite
  excluded        String        // JSON array as string for SQLite
  highlights      String        // JSON array as string for SQLite
  itinerary       String        // JSON as string for SQLite
  status          TourStatus    @default(DRAFT)
  featured        Boolean       @default(false)
  rating          Float         @default(0)
  totalReviews    Int           @default(0)
  totalBookings   Int           @default(0)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  vendorId        String
  vendor          User          @relation("VendorTours", fields: [vendorId], references: [id])
  destinationId   String
  destination     Destination   @relation(fields: [destinationId], references: [id])
  
  bookings        Booking[]
  reviews         Review[]
  wishlist        Wishlist[]
  availability    TourAvailability[]
  
  // Itinerary relation
  itineraryItems  ItineraryItem[]
  
  @@map("tours")
}

model TourAvailability {
  id            String    @id @default(cuid())
  tourId        String
  startDate     DateTime
  endDate       DateTime
  availableSpots Int
  bookedSpots   Int       @default(0)
  price         Float?    // Override base price if needed
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tour          Tour      @relation(fields: [tourId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  
  @@map("tour_availability")
}

// Booking Management
model Booking {
  id                String        @id @default(cuid())
  bookingNumber     String        @unique
  userId            String
  tourId            String
  availabilityId    String
  guestInfo         Json?         // For guest bookings
  numberOfTravelers Int
  totalPrice        Float
  paymentStatus     PaymentStatus @default(PENDING)
  bookingStatus     BookingStatus @default(PENDING)
  specialRequests   String?
  emergencyContact  Json?         // Emergency contact info
  bookedAt          DateTime      @default(now())
  travelDate        DateTime
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  user              User              @relation(fields: [userId], references: [id])
  tour              Tour              @relation(fields: [tourId], references: [id])
  availability      TourAvailability  @relation(fields: [availabilityId], references: [id])
  payments          Payment[]
  
  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  amount          Float
  currency        String        @default("USD")
  paymentMethod   String        // stripe, razorpay, etc.
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  booking         Booking       @relation(fields: [bookingId], references: [id])
  
  @@map("payments")
}

// Review System
model Review {
  id          String   @id @default(cuid())
  userId      String
  tourId      String
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  images      String?   // JSON array as string for SQLite
  isVerified  Boolean  @default(false)
  helpfulVotes Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  tour        Tour     @relation(fields: [tourId], references: [id])
  
  @@unique([userId, tourId]) // One review per user per tour
  @@map("reviews")
}

// Wishlist System
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  tourId    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  tour      Tour     @relation(fields: [tourId], references: [id])
  
  @@unique([userId, tourId])
  @@map("wishlists")
}

// Content Management
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  tags        String?   // JSON array as string for SQLite
  published   Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("blog_posts")
}

// Communication
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("contact_messages")
}

// Real-time Communication
model ChatRoom {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  participants ChatRoomParticipant[]
  
  @@map("chat_rooms")
}

model ChatMessage {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  message   String
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model ChatRoomParticipant {
  id         String    @id @default(cuid())
  roomId     String
  userId     String
  joinedAt   DateTime  @default(now())
  lastSeenAt DateTime?
  
  room       ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@map("chat_room_participants")
}

enum NotificationType {
  BOOKING
  TOUR
  PAYMENT
  SYSTEM
  PROMOTION
  MESSAGE
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data for the notification
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model UserPresence {
  id         String    @id @default(cuid())
  userId     String    @unique
  isOnline   Boolean   @default(false)
  lastSeenAt DateTime  @default(now())
  socketId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_presence")
}

enum NotificationChannel {
  PUSH        // Real-time push notifications
  EMAIL       // Email notifications
  SMS         // SMS notifications (future)
  IN_APP      // In-app notifications only
}

model NotificationPreference {
  id        String              @id @default(cuid())
  userId    String
  type      NotificationType    // BOOKING, TOUR, PAYMENT, etc.
  channels  String              // JSON array of enabled channels
  enabled   Boolean             @default(true)
  frequency String?             // immediate, hourly, daily
  quietHours Json?              // { start: "22:00", end: "08:00" }
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type])
  @@map("notification_preferences")
}

// Project Progress & Tasking
model Project {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  defaultBranch String?  @default("main")
  createdAt     DateTime @default(now())
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String       @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      TaskStatus   @default(OPEN)
  priority    TaskPriority @default(MEDIUM)
  tags        String?      // JSON array as string for SQLite
  dueDate     DateTime?
  assignedTo  String?
  createdBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([projectId])
}

enum ChangeType {
  CONTENT_UPDATE
  FILE_CHANGE
  DB_MIGRATION
  CONFIG_CHANGE
  RELEASE
}

model ChangeLog {
  id          String     @id @default(cuid())
  projectId   String
  type        ChangeType
  description String
  entityType  String?
  entityId    String?
  commitHash  String?
  diffSummary String?
  userId      String?
  createdAt   DateTime   @default(now())

  @@index([projectId])
}

model Checkpoint {
  id          String   @id @default(cuid())
  projectId   String
  name        String?
  branch      String?
  commitHash  String?
  summary     String?
  snapshot    String?   // JSON
  createdBy   String?
  createdAt   DateTime  @default(now())

  @@index([projectId])
}

model UserProgress {
  id               String   @id @default(cuid())
  userId           String
  projectId        String
  lastCheckpointId String?
  lastRoute        String?
  lastSection      String?
  lastEntityType   String?
  lastEntityId     String?
  lastSeenAt       DateTime @default(now())

  @@unique([userId, projectId])
}

// Settings
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("settings")
}

// Itineraries
model Itinerary {
  id        String   @id @default(cuid())
  userId    String?
  title     String
  days      Int       @default(1)
  isPublic  Boolean   @default(false)
  shareId   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User?     @relation(fields: [userId], references: [id])
  items     ItineraryItem[]

  @@map("itineraries")
}

model ItineraryItem {
  id           String    @id @default(cuid())
  itineraryId  String
  day          Int
  orderIndex   Int        @default(0)
  tourId       String?
  destinationId String?
  title        String?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  itinerary    Itinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  tour         Tour?      @relation(fields: [tourId], references: [id])
  destination  Destination? @relation(fields: [destinationId], references: [id])

  @@index([itineraryId])
  @@map("itinerary_items")
}
